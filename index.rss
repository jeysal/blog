<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tim Seckinger&apos;s blog</title>
    <link>https://blog.jeys.al/</link>
    <description>Tim Seckinger&apos;s blog about coding and technology.</description>
    <language>en-US</language>
    <lastBuildDate>Thu, 20 Oct 2022 01:41:42 +0000</lastBuildDate>
    <image>
      <url>https://blog.jeys.al/favicon.png</url>
      <title>Tim Seckinger&apos;s blog</title>
      <link>https://blog.jeys.al/</link>
    </image>
    <item>
      <title>Testing asynchronous code: Manual promise resolution</title>
      <link>https://blog.jeys.al/posts/testing-asynchronous-code-manual-promise-resolution.html</link>
      <category>Testing</category>
      <category>JavaScript</category>
      <guid>https://blog.jeys.al/posts/testing-asynchronous-code-manual-promise-resolution.html</guid>
      <pubDate>Wed, 12 Oct 2022 19:08:10 +0200</pubDate>
      <content:encoded><![CDATA[

      <p>
        Asynchronicity is one of the harder problems to deal with trying to
        write correct code, and also trying to test it. Yet it constantly comes
        up in frontend code, by the asynchronous nature of user interactions and
        other interfaces such as network connections. When the code has races or
        cascades in particular, I've seen lots of people struggle to write tests
        for it, and end up with overcomplicated or brittle tests. This post is
        about a testing pattern that few people appear to be aware of and that
        can aid in many situations when testing asynchronous production code.
      </p>
      <h3>A minimal asynchronous UI test</h3>
      <p>
        The simplest commonly occurring asynchronous UI test is one where the
        test mocks out an asynchronous network operation. The following is an
        example of this from
        <a target="_blank" rel="noopener noreferrer" href="https://reactjs.org/">React</a>
        code tested using
        <a target="_blank" rel="noopener noreferrer" href="https://jestjs.io/">Jest</a>
        and
        <a target="_blank" rel="noopener noreferrer" href="https://testing-library.com/">Testing Library</a>:
      </p>
      <pre><code class="language-jsx" data-stripindent="">
      it('shows a success message after form submission', async () =&gt; {
        const handleSubmit = jest.fn().mockResolvedValue(undefined);
        render(&lt;Form onSubmit={handleSubmit} /&gt;);

        await user.click(await screen.findByText(/save|submit|confirm/i));
        expect(handleSubmit).toHaveBeenCalled();
        expect(await screen.findByText(/success|done/i)).toBeVisible();
      });
    </code></pre>
      <p>
        In this example, <code>handleSubmit</code>, which in production code
        might e.g. perform a <code>POST</code> network request, returns a
        promise that resolves immediately (in a test for the failure case it
        would reject immediately). The component under test will proceed to
        display the success message if working correctly, which is what we're
        testing and what we then assert on.
      </p>
      <p>
        This is fairly straightforward and is, provided knowledge of the
        relevant testing APIs, more or less what most people will arrive at
        after a short while. The reason it is so simple is that resolving the
        promise immediately hides away the intermediate state where the form has
        been submitted, but the submission handling has not yet completed. This
        is okay because the test does not care about it. But what if, say, we
        wanted to check that while the submission is in progress, the button
        cannot be clicked again, which would trigger a second submission of the
        form?
      </p>
      <h3>The intermediate state</h3>
      <p>
        While I've often seen the intermediate states during network operations
        not receive any consideration at all in tests, they can actually be of
        critical importance to the proper functioning of applications. In our
        example, an impatient user clicking the submission button twice could
        cause the creation of duplicate database entries, trigger two push
        notifications, or run into an error for the second operation. Failing to
        prevent this could also invalidate assumptions we're making elsewhere in
        the code (such as that only up to one of these operations is pending at
        any time) and cause problems further down the line. Thus I recommend to
        always test the logic dealing with these intermediate states, pinning
        down a contract for how the code is supposed to behave during them.
      </p>
      <p>
        Testing that the button is disabled during the intermediate state
        requires us to stop pretending that submission is immediate and sneak an
        <code>expect(...).toBeDisabled()</code> assertion in during that
        intermediate state. This is where beginners often start to struggle. One
        common approach I've seen is to write a more realistic mock for
        <code>handleSubmit</code>:
      </p>
      <pre><code class="language-jsx" data-stripindent="">
      it('disables the button while submitting', async () =&gt; {
        const handleSubmit = jest.fn().mockReturnValue(timer(100));
        render(&lt;Form onSubmit={handleSubmit} /&gt;);

        await user.click(await screen.findByText(/save|submit|confirm/i));
        expect(handleSubmit).toHaveBeenCalled();
        expect(await screen.findByText(/save|submit|confirm/i)).toBeDisabled();

        await timer(110);
        expect(await screen.findByText(/success|done/i)).toBeVisible();
      });
    </code></pre>
      <p>
        Making our fake network request take 100ms (as it might in production)
        allows us to capture the intermediate state immediately after the button
        click. Only after then waiting at least 100ms ourselves, we will see the
        terminal success state.
      </p>
      <p>
        This is not an inelegant solution and is intuitive in that it closely
        resembles what actually occurs with a network-bound submission process.
        However, it has the disadvantage that our test now takes over 100ms to
        complete.
      </p>
      <p>
        Some will jump to enable a fake timer solution provided by the testing
        framework in order to have these &gt;100ms of time pass in ~0ms of real
        time, replacing
        <code>await timer(110)</code> with
        <code>await jest.advanceTimersByTime(110)</code>. This, while
        introducing a little mental overhead reading these tests, does the
        job.<br>
        Others will simply drastically reduce the mock and wait times, perhaps
        even down to 0ms. This, while introducing dependency on the ordering of
        the task queue and potentially making the code more confusing, also does
        the job.
      </p>
      <p>
        So do we even need to look at another alternative? As we will see, both
        of these solutions do not help with the increasing confusion as we
        approach more complex asynchronous flows.
      </p>
      <h3>Cascades, Races, â€¦</h3>
      <p>
        Consider a user operation that creates or modifies one entity and then
        another based on it. Some component, either directly or using a helper
        function, will be responsible for calling these two operations in
        sequence. How would we go about testing the intermediate states during
        these operations? (provided that they are actually interesting enough to
        be worth testing; for readability in this example we'll merely look for
        status texts in our assertions)
      </p>
      <pre><code class="language-jsx" data-stripindent="">
      it('creates an employee and sets them as store manager', async () =&gt; {
        const handleCreateEmployee = jest.fn().mockReturnValue(
          timer(100).then(() =&gt; 'employee1337')
        );
        const handleSetStoreManager = jest.fn().mockReturnValue(timer(100));
        render(&lt;CreateStoreManager
          storeId="store42"
          onCreateEmployee={handleCreateEmployee}
          onSetStoreManager={handleSetStoreManager}
        /&gt;);

        await user.type(await screen.findByLabelText(/name/i), 'John Doe');
        await user.click(await screen.findByText(/create/i));
        expect(handleCreateEmployee).toHaveBeenCalledWith('John Doe');
        expect(await screen.findByText(/creating employee/i)).toBeVisible();

        await timer(110);
        expect(handleSetStoreManager).toHaveBeenCalledWith('store42', 'employee1337');
        expect(await screen.findByText(/setting store manager/i)).toBeVisible();

        await timer(100);
        expect(await screen.findByText(/success|done/i)).toBeVisible();
      });
    </code></pre>
      <p>
        As you can see, we establish the timings for our promise resolutions at
        the top, and then later process the cascade step-by-step. This is
        already harder to read because <code>await timer(100)</code> does not
        exactly make it apparent what operation is finishing at this step. As
        you may be able imagine, this problem gets worse with even more complex
        flows, such as races, where we simulate promises resolving in varying
        orders to observe how the code behaves.
      </p>
      <p>
        Fake timers or shorter durations can make this test faster, but neither
        make it more readable. <code>waitFor</code> constructs are applicable
        and can help in some cases, but only test "this should happen at some
        point", not "when this operation finishes, this should happen".
      </p>
      <h3>Manual promise resolution</h3>
      <p>
        My preferred approach to this problem is resolving promises manually in
        tests. I've seen few people use this approach, perhaps because most
        people are not used to calling the <code>Promise</code> constructor
        directly in application code. Yet I run into situations where this
        pattern is useful just about every week while writing frontend code.
      </p>
      <pre><code class="language-jsx" data-stripindent="">
      it('creates an employee and sets them as store manager', async () =&gt; {
        let resolveCreateEmployee;
        const handleCreateEmployee = jest.fn().mockReturnValue(
          new Promise(resolve =&gt; { resolveCreateEmployee = resolve })
        );
        let resolveSetStoreManager;
        const handleSetStoreManager = jest.fn().mockReturnValue(
          new Promise(resolve =&gt; { resolveSetStoreManager = resolve })
        );
        render(&lt;CreateStoreManager
          storeId="store42"
          onCreateEmployee={handleCreateEmployee}
          onSetStoreManager={handleSetStoreManager}
        /&gt;);

        await user.type(await screen.findByLabelText(/name/i), 'John Doe');
        await user.click(await screen.findByText(/create/i));
        expect(handleCreateEmployee).toHaveBeenCalledWith('John Doe');
        expect(await screen.findByText(/creating employee/i)).toBeVisible();

        // `act` is a React helper that ensures React is done processing all changes
        act(() =&gt; resolveCreateEmployee('employee1337'));
        expect(handleSetStoreManager).toHaveBeenCalledWith('store42', 'employee1337');
        expect(await screen.findByText(/setting store manager/i)).toBeVisible();

        act(resolveSetStoreManager);
        expect(await screen.findByText(/success|done/i)).toBeVisible();
      });
    </code></pre>
      <p>
        This approach has a high degree of control and clarity, even as more
        asynchronous operations get involved and they become weirdly
        interleaved. I've written fairly long test cases this way without them
        feeling hard to comprehend.
      </p>
      <p>
        It is fast, because no
        <a target="_blank" rel="noopener noreferrer" href="https://javascript.info/event-loop">macrotask</a>
        timers are scheduled with a delay; instead only promise ticks are
        processed. Thus, fake timers are not needed. In general, using fake
        timers to test production code that does not use timers, the only code
        that does being the test code itself, is almost certain to be an
        overcomplicated testing strategy.
      </p>
      <p>
        It is also way clearer than plainly reducing timer durations down to
        zero or close to zero, because each step mentions directly which
        operation is completing.
      </p>
      <p>
        <code>toHaveBeenCalled</code> assertions on the mocked network
        operations become superfluous (we keep the
        <code>toHaveBeenCalledWith</code> to verify correct arguments). If
        resolving the promise leads to an observable state change in the
        component, it must have called our mock to obtain the promise anyway;
        there is no other way it could have noticed the promise resolution and
        changed its state.
      </p>
      <h3>Reference code sample</h3>
      <p>
        The code sample for the simpler test with only one intermediate (button
        disabled) state follows, showing a minimal realistic example of this
        pattern in action:
      </p>
      <pre><code class="language-jsx" data-stripindent="">
      it('disables the button while submitting', async () =&gt; {
        let resolveSubmit;
        const handleSubmit = jest.fn().mockReturnValue(
          new Promise(resolve =&gt; { resolveSubmit = resolve })
        );
        render(&lt;Form onSubmit={handleSubmit} /&gt;);

        await user.click(await screen.findByText(/save|submit|confirm/i));
        expect(await screen.findByText(/save|submit|confirm/i)).toBeDisabled();

        act(resolveSubmit);
        expect(await screen.findByText(/success|done/i)).toBeVisible();
      });
    </code></pre>
    ]]></content:encoded>
    </item>
    <item>
      <title>External post: Mirroring our Medium blog to YLD.io</title>
      <link>https://blog.jeys.al/posts/external-post-mirroring-our-medium-blog-to-yld-io.html</link>
      <category>External</category>
      <category>JavaScript</category>
      <category>MDX</category>
      <guid>https://blog.jeys.al/posts/external-post-mirroring-our-medium-blog-to-yld-io.html</guid>
      <pubDate>Mon, 23 Mar 2020 20:03:44 +0000</pubDate>
      <content:encoded><![CDATA[

      <p>
        I wrote a post about the work we did for
        <a target="_blank" rel="noopener noreferrer" href="https://yld.io">YLD</a>
        to mirror their
        <a target="_blank" rel="noopener noreferrer" href="https://medium.com">Medium</a>
        blog to the YLD blog on their own website. It was posted on the YLD
        Medium blog. And then mirrored to the YLD blog. Very meta. Anyway,
        <a target="_blank" rel="noopener noreferrer" href="https://medium.com/yld-blog/mirroring-our-medium-blog-to-yld-io-24aafa821cc8">check it out here</a>.
      </p>
    ]]></content:encoded>
    </item>
  </channel>
</rss>
